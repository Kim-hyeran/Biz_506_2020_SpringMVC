<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.2.xsd">

	<!-- authProvider에서 UserDetailService를 사용해야하기 때문에 여기에 UserDetailService 클래스가 있는 패키지를 스캔하도록 설정 -->
	<context:component-scan base-package="com.biz.book.service.auth"/>
	
	<!-- 권한 검사를 할 때 prefix를 설정하는 클래스 bean -->
	<!-- 이 클래스를 bean 설정하면서 construct-arg value="" : prefix를 제거하는 효과 -->
	<!-- security 버전마다 조금씩 차이가 있어서 설정값이 적용되지 않는 경우가 있다. -->
	<!-- 보통은 설정하지 않고 기본값으로 접두어를 붙여서 사용한다(예 :  ROLE_ADMIN). -->
	<!-- class="org.springframework.security.config.core.GrantedAuthorityDefaults" -->
	
	<!-- spring security에서 사용할 AuthenticationProvider를 구현한 클래스를 bean으로 등록 -->
	<bean id="customAuthProvider" class="com.biz.book.auth.AuthProviderImpl" />
	
	<!-- 커스터마이징된 AuthProvider를 spring security에서 사용하도록 security:authentication-manager에 등록 -->
	<security:authentication-manager>
		<security:authentication-provider ref="customAuthProvider" />
	</security:authentication-manager>

	<!-- spring security의 핵심 설정 부분 -->
	<!-- security:http -->
	<!-- login form 설정 -->
	<!-- login 방법 설정 -->
	<!-- login이 되었을 때 인가, 권한에 대한 설정 -->
	
	<!-- use-expressions="true" : hasRole() 함수 사용 요청 -->
	<security:http auto-config="true" use-expressions="true">
		<!--
		 security:csrf의 disabled 속성을 true로 설정하면 POST 전송 시 Token을 첨부하지 않아도 사용 가능하도록 한다.
		 단, 이 방법은 다른 API와 연동할 때를 제외하고 사용하지 않는것이 좋다.
		 기본값은 항상 disabled="false"로 설정한다.
		-->
		<security:csrf disabled="false" />
		<security:form-login username-parameter="username" password-parameter="password"/>
		<!-- logout이 성공적으로 수행되면 "/", 홈 화면으로 돌아가라 -->
		<security:logout logout-url="/logout" logout-success-url="/" invalidate-session="true"/>
		
	<!-- login이 되었을 때 URL 패턴에 따라 접근 권한을 세밀하게 부여할 수 있다. : security:intercept 기능 -->
	<!-- 접근할 URL을 pattern 속성에 지정하고, 접근할 권한이 있는지 검사하도록 access 속성에 지정 -->
	<!--
	 패턴 지정 주의 사항
	 패턴은 URL 단계가 깊을수록 상단에 먼저 작성을 해주어야 한다.
		만약 /user/**, /user/a/b/c 순서로 패턴이 있을 경우 /user/a/b/c/는 무시된다.
		/user/a/b/c, /user/** 순서로 패턴을 나열해야 한다.
	-->
		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>

		<security:intercept-url pattern="/member/mypage" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')"/>
		<security:intercept-url pattern="/member/password" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')"/>
		<!-- /user는 부모 url이기 때문에 가장 아래애 배치해야 자식 url의 권한 명령이 무시되지 않는다. -->
		<security:intercept-url pattern="/member/**" access="permitAll()"/>

		<security:intercept-url pattern="/books/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')"/>
		<security:intercept-url pattern="/**" access="permitAll()"/>
	</security:http>
	
	<!-- 회원가입, 로그인에서 사용자의 비밀번호를 암호화하기 위하여 암호화 도구를 bean으로 설정 -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg value="4" index="0" />
	</bean>

</beans>
